name: CI/CD pipeline

on:
    push:
        branches:
            - main

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - name: checkout the code
              uses: actions/checkout@v2
            - name: setup go
              uses: actions/setup-go@v3
              with:
                go-version: '1.21'
            - name: run test
              run: |
                go test -v ./...

    build-and-push-docker:
        runs-on: ubuntu-latest
        needs: test
        steps:
            - name: checkout the code
              uses: actions/checkout@v2

            - name: create env file
              run: |
                echo "${{secrets.ENV}}" >> .env

            - name: create google credentials file from secret
              run: |
                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo ${{secrets.GOOGLE_CREDENTIALS}} | base64 --decode | jq > google_credentials.json

            - name: build docker
              run: docker build -t fajarsdq/agreenery:1.0.0 .

            - name: docker hub login
              uses: docker/login-action@v1
              with: 
                username: ${{secrets.DOCKER_USER}}
                password: ${{secrets.DOCKER_TOKEN}}

            - name: push image
              run: docker push fajarsdq/agreenery:1.0.0
    deploy:
      needs: build-and-push-docker
      runs-on: ubuntu-latest
      env:
        IMAGE_URI: 'fajarsdq/agreenery:1.0.0'
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}

      steps:
        - name: Check out the code
          uses: actions/checkout@v2

        - name: Create PEM file from secret
          run: |
            echo "${{ secrets.EC2_PEM }}" > ec2-key.pem
            chmod 600 ec2-key.pem  # Set appropriate permissions

        - name: Deploy to EC2
          run: |
            ssh -i ec2-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
              # Stop the current container if running
              sudo docker ps -q --filter "name=agreenery-app" | grep -q . && sudo docker stop agreenery-app || true
              sudo docker rm agreenery-app || true

              # Pull the latest image from ECR
              sudo docker pull $IMAGE_URI

              # Run the new container
              sudo docker run -d --name agreenery-app -p 80:1323 $IMAGE_URI
            EOF

        - name: Clean up PEM file
          run: rm -f ec2-key.pem


